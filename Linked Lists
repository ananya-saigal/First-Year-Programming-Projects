class Node():
    def __init__(self,data,next=None):
        self.data=data
        self.next=next
        
class LinkedList():
    def __init__(self,head=None):
        self.head=head
    def add_nodes_tail(self,new):
            current=self.head
            if current:
               while current.next:
                  current=current.next
               current.next=Node(new)
            else:
               self.head=Node(new)
    def add_nodes_head(self,new):
            new=Node(new)
            current=self.head
            self.head=new
            new.next=current
    def print(self):
        current= self.head
        while current:
            print(current.data,end='-->')
            current=current.next
    def reverseList(self):
        current=self.head
        prev=None
        while current:
                  next=current.next
                  current.next=prev
                  prev=current
                  current=next
        self.head=prev
     def recursive_reverse(self, head):
 
        # If head is empty or last node is reached
        if head is None or head.next is None:
            return head
 
        # Recursive call till last node is reached and then last node is saved as rest
        rest = self.recursive_reverse(head.next)
 
        # after last node is reached it is returned to second last node
        #second last node is now called head and then head.next is last node
        head.next.next = head
        head.next = None
       
       #returns last node
        return rest
        
        #now third last node is returned second last node where head is third last node and head.next is second last node 
        #this process continues till first node is reached
        #ex. Linked List:1->2->3->4
        #recursive call:1 is head and rest is (2->3->4) then 2 is head.next and rest is (3->4) so on till 4 is called and 4 is saved as rest.
        #Then 4 is returned to 3(now 4 is head.next and 3 is head) and then 4->3->none 
        #then 3 passed to 2 and (now head is 2 and head.next is 3) and then 4->3->2->none and then 2 passed to 1 and it becomes 4->3->2->1->none 
        #4 will always remain rest so returning rest means returning 4 which is now the first node or new head of linked list
        
       
def recurssive_print(head):
      if head==None:
         return "None"
      else:
         return f"{head.data} -->"+recurssive_print(head.next)  
a=LinkedList()
a.add_nodes_tail(5)
a.add_nodes_tail(3)
a.add_nodes_head(2)
print(a.print())
a.reverseList()
a.recurssive_reverse(a.head)
a.print()
